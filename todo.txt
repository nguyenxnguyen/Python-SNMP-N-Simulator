snmpsim
-------
- Consider a textbox for passing in other extra args in simlaunch? Would
  be nice for new -r option as well as -di/-do
- Change any loading errors to be deferred until after load is completed
  (and screen cleared).
- Make binding to port happen before loading of data?
- Make it so warnings printed out during loading are deferred until after 
  so they don't foul up progress bar? Dump in J:\DUMPS\Verilink\1602-Concord
  shows this nicely now that I've made it so bad var types don't exit the sim.
- RMON2 polling support (ignore timefilters)
- cleanup/modularize _processRequest (and anything else that's become bloated
  --like mainline code)

# TODO: Make it so errors are output only when it makes sense. Decide if they should
#       key off of self.verbose or not as well. Make everything consistent.

# TODO: Change references to v1Mode/v2Mode to -v1 and -v2c

# TODO: Make change functions operate based on time, rather than on number
#       of requests? Would be nice for counters not to increase more quickly
#       when two people are polling a sim.

# TODO: Put locking issue to bed once and for all

# TODO: Make it so reasonable defaults replace invalid data (possibly unless in strict
#       mode or something?) Want to have simulator be able to run almost no matter what.
#       Have seen negative timeticks before (nhSnmpTool problem, I'm sure). Maybe
#       zero out or use abs value or something?

# TODO: Make it so changeFunction is changable through interface. Potentially only
#       allow funtions compatible with the datatype? Can't add delta to an Octet String.

# TODO: Consider making -di and -d0 output to files (say, in.txt and out.txt
#       instead of stdout? Pain in the neck to cut and past in dos/windows.

# TODO: Consider not allowing sysUptime to be changed? It's a special case...actually,
#       would be nice to be able to change it somehow. Hmmm...something to think about.

# TODO: Make genErr returned if resulting pdu is too large (probably not hard at all if we
#       keep the old request object around). Think UDP limit is 65535.



# TODO Eventually
# ---------------
# TODO: Decide if we want to make it illegal to retrieve v2 datatypes when in v1 mode.
#       Right now it works...we allow Counter64s to be sent back, but we may want to have
#       an option to disallow this. Could just wait until it becomes a problem and add
#       it then if it is.

# TODO: Consider finding a way to make unencoding of getbulk pdus not attempt to happen if
#       we're not in v2 mode? Seems like bad form to do V2 processing when just in V1 mode.
#       Something to think about, at least.

# TODO: Spif up GUI used to launch to include current set of cmd line options?

# TODO: Migrate skeleton manager logic (GET, GETNEXT, etc) processing into snmplib
#       itself? Challenge would be to keep it generic. Latest brainstorm was to have
#       get and getNext functions be overridable (by snmpsim's MibDataStore get and
#       getNext, of course). If we assume the library has to return an SnmpVariable or
#       raise an exception, this may actually work.



snmplib
-------

# TODO Eventually
# ---------------
# TODO:  Separate datatypes that should be handled differently from v1 to v2:
#        - Max value of integers (unlimited in v1, limited in v2)
#        - Total lenth of valid oid (unlimited in v1, limited to 128 in v2)
#        - Largest suboid in valid oid (unlimited in v1, limited to 65535 in v2)
#        - Whether or not variables in the varbind of requests have to be NULL values or not (no in v1, yes in v2)
#        Make it so the different types of pdus use the correct data types, so the v1 support can have
#        hellishly long integers, but the v2 stuff can't, etc. Write tests for this stuff.

# TODO: Rewrite functions left over from PySNMP

# TODO: Get a real client API going (make GET requests easily, etc). Left off with commented out SnmpV1Session class
#       way down below.

# TODO: See if client side stuff can be streamlined some. Things like constructing a GETBULK request from
#       the default SnmpMessage() stuff is tricky...have to change .pdu AND the contents of .items. Add
#       functions to control changing of attributes? / Get wel-defined API going for access to stuff
#       (thinking of changing pdu's in place and stuff that touches .items array in sequences)

# TODO: Get doc strings everywhere (probably missed a few things here and there).

# TODO: Consider writing tests for various types of exceptions being raised at some point?

# TODO: Get consistent error checking in encoding/decoding functions for things going awry
